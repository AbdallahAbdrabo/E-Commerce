{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@abacritt/angularx-social-login\";\nexport class AppComponent {\n  constructor(authService) {\n    this.authService = authService;\n    this.title = 'socialLoginApp';\n  }\n  ngOnInit() {\n    this.authService.authState.subscribe(user => {\n      this.user = user;\n      this.loggedIn = user != null;\n      console.log({\n        user\n      });\n    });\n  }\n  handelSignIn() {\n    let Data = {\n      token\n    };\n    this._UserService.signIn(Data).subscribe(data => {\n      if (data.message == \"Done\") {\n        this.load = false;\n        //set token localStorage\n        localStorage.setItem('token', data.token);\n        //redirect homePage\n        this._Router.navigateByUrl(\"/profile\");\n        //Navigate DashBored\n        this.loginForm.reset();\n      }\n    }, err => {\n      this.load = false;\n      this.loginError = true;\n      const {\n        message\n      } = err.error;\n      console.log(message);\n      if (message == 'Validation error') {\n        this.loginErrorMessage = \"In-valid data please enter valid data\";\n      } else if (message == \"Email not Exist\") {\n        this.loginErrorMessage = \"This user is not registered please signUp first\";\n      } else if (message == \"Email not confirmed yet\") {\n        this.loginErrorMessage = \"Please confirm your email\";\n      } else if (message == \"In-valid Password\") {\n        this.loginErrorMessage = \"Please enter the correct password\";\n      } else {\n        this.loginErrorMessage = `${message}`;\n      }\n    });\n  }\n}\nAppComponent.ɵfac = function AppComponent_Factory(t) {\n  return new (t || AppComponent)(i0.ɵɵdirectiveInject(i1.SocialAuthService));\n};\nAppComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: AppComponent,\n  selectors: [[\"app-root\"]],\n  decls: 1,\n  vars: 0,\n  template: function AppComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"asl-google-signin-button\");\n    }\n  },\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":";;AAOA,OAAM,MAAOA,YAAY;EAKvBC,YAAoBC,WAA8B;IAA9B,gBAAW,GAAXA,WAAW;IAJ/B,UAAK,GAAG,gBAAgB;EAI8B;EAEtDC,QAAQ;IACN,IAAI,CAACD,WAAW,CAACE,SAAS,CAACC,SAAS,CAAEC,IAAS,IAAI;MACjD,IAAI,CAACA,IAAI,GAAGA,IAAI;MAChB,IAAI,CAACC,QAAQ,GAAID,IAAI,IAAI,IAAK;MAC9BE,OAAO,CAACC,GAAG,CAAC;QAAEH;MAAI,CAAE,CAAC;IAGvB,CAAC,CAAC;EACJ;EAEAI,YAAY;IAEV,IAAIC,IAAI,GAAG;MACTC;KACD;IACD,IAAI,CAACC,YAAY,CAACC,MAAM,CAACH,IAAI,CAAC,CAACN,SAAS,CAACU,IAAI,IAAG;MAC9C,IAAIA,IAAI,CAACC,OAAO,IAAI,MAAM,EAAE;QAC1B,IAAI,CAACC,IAAI,GAAG,KAAK;QACjB;QACAC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEJ,IAAI,CAACH,KAAK,CAAC;QACzC;QACA,IAAI,CAACQ,OAAO,CAACC,aAAa,CAAC,UAAU,CAAC;QACtC;QACA,IAAI,CAACC,SAAS,CAACC,KAAK,EAAE;;IAE1B,CAAC,EACCC,GAAG,IAAG;MACJ,IAAI,CAACP,IAAI,GAAG,KAAK;MACjB,IAAI,CAACQ,UAAU,GAAG,IAAI;MACtB,MAAM;QAAET;MAAO,CAAE,GAAGQ,GAAG,CAACE,KAAK;MAC7BlB,OAAO,CAACC,GAAG,CAACO,OAAO,CAAC;MACpB,IAAIA,OAAO,IAAI,kBAAkB,EAAE;QACjC,IAAI,CAACW,iBAAiB,GAAG,uCAAuC;OACjE,MAAM,IAAIX,OAAO,IAAI,iBAAiB,EAAE;QACvC,IAAI,CAACW,iBAAiB,GAAG,iDAAiD;OAC3E,MAAM,IAAIX,OAAO,IAAI,yBAAyB,EAAE;QAC/C,IAAI,CAACW,iBAAiB,GAAG,2BAA2B;OACrD,MAAM,IAAIX,OAAO,IAAI,mBAAmB,EAAE;QACzC,IAAI,CAACW,iBAAiB,GAAG,mCAAmC;OAC7D,MAAM;QACL,IAAI,CAACA,iBAAiB,GAAG,GAAGX,OAAO,EAAE;;IAEzC,CAAC,CACF;EACH;;AAnDWhB,YAAY;mBAAZA,YAAY;AAAA;AAAZA,YAAY;QAAZA,YAAY;EAAA4B;EAAAC;EAAAC;EAAAC;IAAA;MCPzBC,2CAAsD","names":["AppComponent","constructor","authService","ngOnInit","authState","subscribe","user","loggedIn","console","log","handelSignIn","Data","token","_UserService","signIn","data","message","load","localStorage","setItem","_Router","navigateByUrl","loginForm","reset","err","loginError","error","loginErrorMessage","selectors","decls","vars","template","i0"],"sourceRoot":"","sources":["E:\\course route\\NODE\\C39\\Angular\\socialLoginApp\\src\\app\\app.component.ts","E:\\course route\\NODE\\C39\\Angular\\socialLoginApp\\src\\app\\app.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { SocialAuthService } from \"@abacritt/angularx-social-login\";\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'socialLoginApp';\n  user: any;\n  loggedIn: any;\n\n  constructor(private authService: SocialAuthService) { }\n\n  ngOnInit() {\n    this.authService.authState.subscribe((user: any) => {\n      this.user = user;\n      this.loggedIn = (user != null);\n      console.log({ user });\n\n\n    });\n  }\n\n  handelSignIn() {\n \n    let Data = {\n      token\n    }\n    this._UserService.signIn(Data).subscribe(data => {\n      if (data.message == \"Done\") {\n        this.load = false;\n        //set token localStorage\n        localStorage.setItem('token', data.token);\n        //redirect homePage\n        this._Router.navigateByUrl(\"/profile\")\n        //Navigate DashBored\n        this.loginForm.reset();\n      }\n    },\n      err => {\n        this.load = false;\n        this.loginError = true;\n        const { message } = err.error\n        console.log(message);\n        if (message == 'Validation error') {\n          this.loginErrorMessage = \"In-valid data please enter valid data\";\n        } else if (message == \"Email not Exist\") {\n          this.loginErrorMessage = \"This user is not registered please signUp first\";\n        } else if (message == \"Email not confirmed yet\") {\n          this.loginErrorMessage = \"Please confirm your email\";\n        } else if (message == \"In-valid Password\") {\n          this.loginErrorMessage = \"Please enter the correct password\";\n        } else {\n          this.loginErrorMessage = `${message}`;\n        }\n      }\n    )\n  }\n}\n","<asl-google-signin-button ></asl-google-signin-button>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}