{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@abacritt/angularx-social-login\";\nexport class AppComponent {\n  constructor(authService) {\n    this.authService = authService;\n    this.title = 'socialLoginApp';\n  }\n  ngOnInit() {\n    this.authService.authState.subscribe(user => {\n      this.user = user;\n      this.loggedIn = user != null;\n      console.log({\n        user\n      });\n      handelSignIn();\n      {\n        this.load = true;\n        let Data = {\n          email: this.loginForm.controls.email.value,\n          password: this.loginForm.controls.password.value\n        };\n        this._UserService.signIn(Data).subscribe(data => {\n          if (data.message == \"Done\") {\n            this.load = false;\n            //set token localStorage\n            localStorage.setItem('token', data.token);\n            //redirect homePage\n            this._Router.navigateByUrl(\"/profile\");\n            //Navigate DashBored\n            this.loginForm.reset();\n          }\n        }, err => {\n          this.load = false;\n          this.loginError = true;\n          const {\n            message\n          } = err.error;\n          console.log(message);\n          if (message == 'Validation error') {\n            this.loginErrorMessage = \"In-valid data please enter valid data\";\n          } else if (message == \"Email not Exist\") {\n            this.loginErrorMessage = \"This user is not registered please signUp first\";\n          } else if (message == \"Email not confirmed yet\") {\n            this.loginErrorMessage = \"Please confirm your email\";\n          } else if (message == \"In-valid Password\") {\n            this.loginErrorMessage = \"Please enter the correct password\";\n          } else {\n            this.loginErrorMessage = `${message}`;\n          }\n        });\n      }\n    });\n  }\n}\nAppComponent.ɵfac = function AppComponent_Factory(t) {\n  return new (t || AppComponent)(i0.ɵɵdirectiveInject(i1.SocialAuthService));\n};\nAppComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: AppComponent,\n  selectors: [[\"app-root\"]],\n  decls: 1,\n  vars: 0,\n  template: function AppComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"asl-google-signin-button\");\n    }\n  },\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":";;AAOA,OAAM,MAAOA,YAAY;EAKvBC,YAAoBC,WAA8B;IAA9B,gBAAW,GAAXA,WAAW;IAJ/B,UAAK,GAAG,gBAAgB;EAI8B;EAEtDC,QAAQ;IACN,IAAI,CAACD,WAAW,CAACE,SAAS,CAACC,SAAS,CAAEC,IAAS,IAAI;MACjD,IAAI,CAACA,IAAI,GAAGA,IAAI;MAChB,IAAI,CAACC,QAAQ,GAAID,IAAI,IAAI,IAAK;MAC9BE,OAAO,CAACC,GAAG,CAAC;QAAEH;MAAI,CAAE,CAAC;MACrBI,YAAY,EAAE;MAAC;QACb,IAAI,CAACC,IAAI,GAAG,IAAI;QAChB,IAAIC,IAAI,GAAG;UACTC,KAAK,EAAE,IAAI,CAACC,SAAS,CAACC,QAAQ,CAACF,KAAK,CAACG,KAAK;UAC1CC,QAAQ,EAAE,IAAI,CAACH,SAAS,CAACC,QAAQ,CAACE,QAAQ,CAACD;SAC5C;QACD,IAAI,CAACE,YAAY,CAACC,MAAM,CAACP,IAAI,CAAC,CAACP,SAAS,CAACe,IAAI,IAAG;UAC9C,IAAIA,IAAI,CAACC,OAAO,IAAI,MAAM,EAAE;YAC1B,IAAI,CAACV,IAAI,GAAG,KAAK;YACjB;YACAW,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEH,IAAI,CAACI,KAAK,CAAC;YACzC;YACA,IAAI,CAACC,OAAO,CAACC,aAAa,CAAC,UAAU,CAAC;YACtC;YACA,IAAI,CAACZ,SAAS,CAACa,KAAK,EAAE;;QAE1B,CAAC,EACCC,GAAG,IAAG;UACJ,IAAI,CAACjB,IAAI,GAAG,KAAK;UACjB,IAAI,CAACkB,UAAU,GAAG,IAAI;UACtB,MAAM;YAAER;UAAO,CAAE,GAAGO,GAAG,CAACE,KAAK;UAC7BtB,OAAO,CAACC,GAAG,CAACY,OAAO,CAAC;UACpB,IAAIA,OAAO,IAAI,kBAAkB,EAAE;YACjC,IAAI,CAACU,iBAAiB,GAAG,uCAAuC;WACjE,MAAM,IAAIV,OAAO,IAAI,iBAAiB,EAAE;YACvC,IAAI,CAACU,iBAAiB,GAAG,iDAAiD;WAC3E,MAAM,IAAIV,OAAO,IAAI,yBAAyB,EAAE;YAC/C,IAAI,CAACU,iBAAiB,GAAG,2BAA2B;WACrD,MAAM,IAAIV,OAAO,IAAI,mBAAmB,EAAE;YACzC,IAAI,CAACU,iBAAiB,GAAG,mCAAmC;WAC7D,MAAM;YACL,IAAI,CAACA,iBAAiB,GAAG,GAAGV,OAAO,EAAE;;QAEzC,CAAC,CACF;;IAGL,CAAC,CAAC;EACJ;;AAlDWrB,YAAY;mBAAZA,YAAY;AAAA;AAAZA,YAAY;QAAZA,YAAY;EAAAgC;EAAAC;EAAAC;EAAAC;IAAA;MCPzBC,2CAAsD","names":["AppComponent","constructor","authService","ngOnInit","authState","subscribe","user","loggedIn","console","log","handelSignIn","load","Data","email","loginForm","controls","value","password","_UserService","signIn","data","message","localStorage","setItem","token","_Router","navigateByUrl","reset","err","loginError","error","loginErrorMessage","selectors","decls","vars","template","i0"],"sourceRoot":"","sources":["E:\\course route\\NODE\\C39\\Angular\\socialLoginApp\\src\\app\\app.component.ts","E:\\course route\\NODE\\C39\\Angular\\socialLoginApp\\src\\app\\app.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { SocialAuthService } from \"@abacritt/angularx-social-login\";\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'socialLoginApp';\n  user: any;\n  loggedIn: any;\n\n  constructor(private authService: SocialAuthService) { }\n\n  ngOnInit() {\n    this.authService.authState.subscribe((user: any) => {\n      this.user = user;\n      this.loggedIn = (user != null);\n      console.log({ user });\n      handelSignIn() {\n        this.load = true;\n        let Data = {\n          email: this.loginForm.controls.email.value,\n          password: this.loginForm.controls.password.value,\n        }\n        this._UserService.signIn(Data).subscribe(data => {\n          if (data.message == \"Done\") {\n            this.load = false;\n            //set token localStorage\n            localStorage.setItem('token', data.token);\n            //redirect homePage\n            this._Router.navigateByUrl(\"/profile\")\n            //Navigate DashBored\n            this.loginForm.reset();\n          }\n        },\n          err => {\n            this.load = false;\n            this.loginError = true;\n            const { message } = err.error\n            console.log(message);\n            if (message == 'Validation error') {\n              this.loginErrorMessage = \"In-valid data please enter valid data\";\n            } else if (message == \"Email not Exist\") {\n              this.loginErrorMessage = \"This user is not registered please signUp first\";\n            } else if (message == \"Email not confirmed yet\") {\n              this.loginErrorMessage = \"Please confirm your email\";\n            } else if (message == \"In-valid Password\") {\n              this.loginErrorMessage = \"Please enter the correct password\";\n            } else {\n              this.loginErrorMessage = `${message}`;\n            }\n          }\n        )\n      }\n\n    });\n  }\n\n  // enterLogin() {\n  //   console.log(\"Entered\");\n\n  //   this.authService.authState.subscribe((user: any) => {\n  //     this.user = user;\n  //     this.loggedIn = (user != null);\n  //     console.log({ user });\n\n  //   });\n  // }\n}\n","<asl-google-signin-button ></asl-google-signin-button>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}